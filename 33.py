if 1:
    import sys
    input = sys.stdin.readline
    import math
    from itertools import *
    from collections import *
    from bisect import *
    import heapq
    import random


# def p8763():
#     n, t = map(int, input().split())
#     s = input().strip()
#     n = len(s)
#     ss = [int(x) for x in s]
#     while t:
#         t -= 1
#         for i in range(1, n):
#             ss[i] ^= ss[i-1]
#     print(ss)
            
"""

学生姓名：李泽旭

试听内容：

与学生互相了解，了解学生的数学基础以及学习态度，以便根据其情况调整课程风格，让学生更易于理解和掌握知识。

梳理七年级数学的重难点，重点讲解代数分解的技巧，尤其是“十字相乘法”的应用。

讲解几何面积的计算方法，并通过练习帮助学生更好地掌握公式的运用。

课堂情况：
李泽旭同学在课堂上表现积极，思维活跃，能够理解老师讲解的内容。代数分解技巧掌握较好，但“十字相乘法”应用的熟练度还有待提高，需要多做练习。几何部分，学生能够较快理解面积计算公式，能很好地应用于实际问题中。总体课堂互动较好，学生能够跟上老师的节奏，课堂气氛轻松愉快。

课程预想：

近3次课复习课本中的代数与几何内容，查漏补缺，尤其是代数分解和几何公式的应用。

进行综合练习，重点覆盖代数、几何和常见题型，帮助学生巩固基础。

针对练习中发现的薄弱环节，课堂上进行针对性讲解，尤其是“十字相乘法”及几何面积计算方法的加强练习。

学习建议：

建议李泽旭同学多做“十字相乘法”专项练习，熟练掌握该技巧，尤其是通过实际题目练习。

几何部分可以多做应用题，确保对公式的理解和应用熟练度，特别是一些复杂的几何图形面积计算。

课后可以将课堂所学的内容进行复习，尤其是代数和几何部分的技巧，查漏补缺。

课后作业：

完成代数分解的专项练习，特别是“十字相乘法”的应用题。
6x² + 11x - 35



1. 课程内容：

讲解了十字相乘法，并通过题目练习加深了对该方法的理解。

介绍了多项式的因式分解，这部分内容是学校课程之外的内容，帮助学生掌握了更多技巧。

进行了不等式的相关练习，讲解了如何解简单的不等式，并通过例题进行实践。

还做了一些几何题目，帮助学生理解平面几何中的基本概念和解题方法。

2. 课堂情况：

泽旭同学十字相乘法的理解较好，但在题目练习中，计算准确性有待提高。多次出现了错误，建议多做一些练习以巩固技巧。

多项式的因式分解是学校不常讲的内容，学生能够理解基本方法，但需要更多的练习来提高熟练度。

不等式部分，学生掌握了解法，但在步骤整理和符号处理上仍有些混乱，需要更多的练习来提高解题的精确度。

几何部分的基础掌握较好，但在一些复杂问题上，学生还需提高解题技巧。 

3. 课后作业：
4x² - 13x - 12 的因式分解
2x⁴ + 6x³ - 2x² - 7x - 1 因式分解

"""




# def lc1561():
#     arr = [2,4,1,2,7,8]
#     arr.sort(reverse=True)
#     ans = 0
#     dq = deque(arr)
#     while dq:
#         dq.popleft()
#         ans += dq.popleft()
#         dq.pop()
#     print(ans)



# def lq741():
#     ans = 0
#     n = int(input())
#     nums = list(map(int, input().split()))
#     heapq.heapify(nums)
#     def check(num): "被调用的函数在主函数里面"
#         pass
#     while len(nums) > 1:
#         x1 = heapq.heappop(nums)
#         x2 = heapq.heappop(nums)
#         ans += x1 + x2
#         check(num) 
#         heapq.heappush(nums, x1 + x2)
#     print(ans)

# lq741()








# def lq357():
#     k = int(input())
#     t = (math.isqrt(8 * k + 1) - 1) >> 1
#     total = t * (t + 1) // 2
#     rem = k - total
#     ans = t * (t + 1) // 2 * (2 * t + 1) // 3 + rem * (t + 1)
#     print(ans)